// source: proto/player.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var proto_simple_wires_module_pb = require('../proto/simple_wires_module_pb.js');
goog.object.extend(proto, proto_simple_wires_module_pb);
var proto_password_module_pb = require('../proto/password_module_pb.js');
goog.object.extend(proto, proto_password_module_pb);
var proto_big_button_module_pb = require('../proto/big_button_module_pb.js');
goog.object.extend(proto, proto_big_button_module_pb);
var proto_simon_says_module_pb = require('../proto/simon_says_module_pb.js');
goog.object.extend(proto, proto_simon_says_module_pb);
goog.exportSymbol('proto.player.CreateGameRequest', null, global);
goog.exportSymbol('proto.player.CreateGameResponse', null, global);
goog.exportSymbol('proto.player.PlayerInput', null, global);
goog.exportSymbol('proto.player.PlayerInput.InputCase', null, global);
goog.exportSymbol('proto.player.PlayerInputResult', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.player.CreateGameRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.player.CreateGameRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.player.CreateGameRequest.displayName = 'proto.player.CreateGameRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.player.CreateGameResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.player.CreateGameResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.player.CreateGameResponse.displayName = 'proto.player.CreateGameResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.player.PlayerInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.player.PlayerInput.oneofGroups_);
};
goog.inherits(proto.player.PlayerInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.player.PlayerInput.displayName = 'proto.player.PlayerInput';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.player.PlayerInputResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.player.PlayerInputResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.player.PlayerInputResult.displayName = 'proto.player.PlayerInputResult';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.player.CreateGameRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.player.CreateGameRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.player.CreateGameRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.CreateGameRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.player.CreateGameRequest}
 */
proto.player.CreateGameRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.player.CreateGameRequest;
  return proto.player.CreateGameRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.player.CreateGameRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.player.CreateGameRequest}
 */
proto.player.CreateGameRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.player.CreateGameRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.player.CreateGameRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.player.CreateGameRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.CreateGameRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.player.CreateGameResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.player.CreateGameResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.player.CreateGameResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.CreateGameResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.player.CreateGameResponse}
 */
proto.player.CreateGameResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.player.CreateGameResponse;
  return proto.player.CreateGameResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.player.CreateGameResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.player.CreateGameResponse}
 */
proto.player.CreateGameResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.player.CreateGameResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.player.CreateGameResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.player.CreateGameResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.CreateGameResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string session_id = 1;
 * @return {string}
 */
proto.player.CreateGameResponse.prototype.getSessionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.player.CreateGameResponse} returns this
 */
proto.player.CreateGameResponse.prototype.setSessionId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.player.PlayerInput.oneofGroups_ = [[10,11,12,13]];

/**
 * @enum {number}
 */
proto.player.PlayerInput.InputCase = {
  INPUT_NOT_SET: 0,
  SIMPLE_WIRES_INPUT: 10,
  PASSWORD_INPUT: 11,
  BIG_BUTTON_INPUT: 12,
  SIMON_SAYS_INPUT: 13
};

/**
 * @return {proto.player.PlayerInput.InputCase}
 */
proto.player.PlayerInput.prototype.getInputCase = function() {
  return /** @type {proto.player.PlayerInput.InputCase} */(jspb.Message.computeOneofCase(this, proto.player.PlayerInput.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.player.PlayerInput.prototype.toObject = function(opt_includeInstance) {
  return proto.player.PlayerInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.player.PlayerInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.PlayerInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    bombId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    moduleId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    simpleWiresInput: (f = msg.getSimpleWiresInput()) && proto_simple_wires_module_pb.SimpleWiresInput.toObject(includeInstance, f),
    passwordInput: (f = msg.getPasswordInput()) && proto_password_module_pb.PasswordInput.toObject(includeInstance, f),
    bigButtonInput: (f = msg.getBigButtonInput()) && proto_big_button_module_pb.BigButtonInput.toObject(includeInstance, f),
    simonSaysInput: (f = msg.getSimonSaysInput()) && proto_simon_says_module_pb.SimonSaysInput.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.player.PlayerInput}
 */
proto.player.PlayerInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.player.PlayerInput;
  return proto.player.PlayerInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.player.PlayerInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.player.PlayerInput}
 */
proto.player.PlayerInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBombId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setModuleId(value);
      break;
    case 10:
      var value = new proto_simple_wires_module_pb.SimpleWiresInput;
      reader.readMessage(value,proto_simple_wires_module_pb.SimpleWiresInput.deserializeBinaryFromReader);
      msg.setSimpleWiresInput(value);
      break;
    case 11:
      var value = new proto_password_module_pb.PasswordInput;
      reader.readMessage(value,proto_password_module_pb.PasswordInput.deserializeBinaryFromReader);
      msg.setPasswordInput(value);
      break;
    case 12:
      var value = new proto_big_button_module_pb.BigButtonInput;
      reader.readMessage(value,proto_big_button_module_pb.BigButtonInput.deserializeBinaryFromReader);
      msg.setBigButtonInput(value);
      break;
    case 13:
      var value = new proto_simon_says_module_pb.SimonSaysInput;
      reader.readMessage(value,proto_simon_says_module_pb.SimonSaysInput.deserializeBinaryFromReader);
      msg.setSimonSaysInput(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.player.PlayerInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.player.PlayerInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.player.PlayerInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.PlayerInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBombId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getModuleId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSimpleWiresInput();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto_simple_wires_module_pb.SimpleWiresInput.serializeBinaryToWriter
    );
  }
  f = message.getPasswordInput();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto_password_module_pb.PasswordInput.serializeBinaryToWriter
    );
  }
  f = message.getBigButtonInput();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto_big_button_module_pb.BigButtonInput.serializeBinaryToWriter
    );
  }
  f = message.getSimonSaysInput();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto_simon_says_module_pb.SimonSaysInput.serializeBinaryToWriter
    );
  }
};


/**
 * optional string session_id = 1;
 * @return {string}
 */
proto.player.PlayerInput.prototype.getSessionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.player.PlayerInput} returns this
 */
proto.player.PlayerInput.prototype.setSessionId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string bomb_id = 2;
 * @return {string}
 */
proto.player.PlayerInput.prototype.getBombId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.player.PlayerInput} returns this
 */
proto.player.PlayerInput.prototype.setBombId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string module_id = 3;
 * @return {string}
 */
proto.player.PlayerInput.prototype.getModuleId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.player.PlayerInput} returns this
 */
proto.player.PlayerInput.prototype.setModuleId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional modules.SimpleWiresInput simple_wires_input = 10;
 * @return {?proto.modules.SimpleWiresInput}
 */
proto.player.PlayerInput.prototype.getSimpleWiresInput = function() {
  return /** @type{?proto.modules.SimpleWiresInput} */ (
    jspb.Message.getWrapperField(this, proto_simple_wires_module_pb.SimpleWiresInput, 10));
};


/**
 * @param {?proto.modules.SimpleWiresInput|undefined} value
 * @return {!proto.player.PlayerInput} returns this
*/
proto.player.PlayerInput.prototype.setSimpleWiresInput = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.player.PlayerInput.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.player.PlayerInput} returns this
 */
proto.player.PlayerInput.prototype.clearSimpleWiresInput = function() {
  return this.setSimpleWiresInput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.player.PlayerInput.prototype.hasSimpleWiresInput = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional modules.PasswordInput password_input = 11;
 * @return {?proto.modules.PasswordInput}
 */
proto.player.PlayerInput.prototype.getPasswordInput = function() {
  return /** @type{?proto.modules.PasswordInput} */ (
    jspb.Message.getWrapperField(this, proto_password_module_pb.PasswordInput, 11));
};


/**
 * @param {?proto.modules.PasswordInput|undefined} value
 * @return {!proto.player.PlayerInput} returns this
*/
proto.player.PlayerInput.prototype.setPasswordInput = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.player.PlayerInput.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.player.PlayerInput} returns this
 */
proto.player.PlayerInput.prototype.clearPasswordInput = function() {
  return this.setPasswordInput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.player.PlayerInput.prototype.hasPasswordInput = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional modules.BigButtonInput big_button_input = 12;
 * @return {?proto.modules.BigButtonInput}
 */
proto.player.PlayerInput.prototype.getBigButtonInput = function() {
  return /** @type{?proto.modules.BigButtonInput} */ (
    jspb.Message.getWrapperField(this, proto_big_button_module_pb.BigButtonInput, 12));
};


/**
 * @param {?proto.modules.BigButtonInput|undefined} value
 * @return {!proto.player.PlayerInput} returns this
*/
proto.player.PlayerInput.prototype.setBigButtonInput = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.player.PlayerInput.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.player.PlayerInput} returns this
 */
proto.player.PlayerInput.prototype.clearBigButtonInput = function() {
  return this.setBigButtonInput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.player.PlayerInput.prototype.hasBigButtonInput = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional modules.SimonSaysInput simon_says_input = 13;
 * @return {?proto.modules.SimonSaysInput}
 */
proto.player.PlayerInput.prototype.getSimonSaysInput = function() {
  return /** @type{?proto.modules.SimonSaysInput} */ (
    jspb.Message.getWrapperField(this, proto_simon_says_module_pb.SimonSaysInput, 13));
};


/**
 * @param {?proto.modules.SimonSaysInput|undefined} value
 * @return {!proto.player.PlayerInput} returns this
*/
proto.player.PlayerInput.prototype.setSimonSaysInput = function(value) {
  return jspb.Message.setOneofWrapperField(this, 13, proto.player.PlayerInput.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.player.PlayerInput} returns this
 */
proto.player.PlayerInput.prototype.clearSimonSaysInput = function() {
  return this.setSimonSaysInput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.player.PlayerInput.prototype.hasSimonSaysInput = function() {
  return jspb.Message.getField(this, 13) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.player.PlayerInputResult.prototype.toObject = function(opt_includeInstance) {
  return proto.player.PlayerInputResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.player.PlayerInputResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.PlayerInputResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    moduleId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    success: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.player.PlayerInputResult}
 */
proto.player.PlayerInputResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.player.PlayerInputResult;
  return proto.player.PlayerInputResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.player.PlayerInputResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.player.PlayerInputResult}
 */
proto.player.PlayerInputResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setModuleId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.player.PlayerInputResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.player.PlayerInputResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.player.PlayerInputResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.PlayerInputResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getModuleId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string module_id = 1;
 * @return {string}
 */
proto.player.PlayerInputResult.prototype.getModuleId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.player.PlayerInputResult} returns this
 */
proto.player.PlayerInputResult.prototype.setModuleId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool success = 2;
 * @return {boolean}
 */
proto.player.PlayerInputResult.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.player.PlayerInputResult} returns this
 */
proto.player.PlayerInputResult.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


goog.object.extend(exports, proto.player);

// @generated by protobuf-ts 2.10.0
// @generated from protobuf file "proto/bomb.proto" (package "bomb", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Module } from "./modules";
/**
 * @generated from protobuf message bomb.Bomb
 */
export interface Bomb {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: map<string, modules.Module> modules = 2;
     */
    modules: {
        [key: string]: Module;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class Bomb$Type extends MessageType<Bomb> {
    constructor() {
        super("bomb.Bomb", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "modules", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => Module } }
        ]);
    }
    create(value?: PartialMessage<Bomb>): Bomb {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.modules = {};
        if (value !== undefined)
            reflectionMergePartial<Bomb>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Bomb): Bomb {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* map<string, modules.Module> modules */ 2:
                    this.binaryReadMap2(message.modules, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap2(map: Bomb["modules"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof Bomb["modules"] | undefined, val: Bomb["modules"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = Module.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field bomb.Bomb.modules");
            }
        }
        map[key ?? ""] = val ?? Module.create();
    }
    internalBinaryWrite(message: Bomb, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* map<string, modules.Module> modules = 2; */
        for (let k of globalThis.Object.keys(message.modules)) {
            writer.tag(2, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            Module.internalBinaryWrite(message.modules[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bomb.Bomb
 */
export const Bomb = new Bomb$Type();

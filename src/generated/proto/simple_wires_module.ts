// @generated by protobuf-ts 2.10.0
// @generated from protobuf file "proto/simple_wires_module.proto" (package "modules", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message modules.SimpleWiresInput
 */
export interface SimpleWiresInput {
    /**
     * @generated from protobuf field: int32 wire_index = 1;
     */
    wireIndex: number;
}
/**
 * @generated from protobuf message modules.SimpleWiresState
 */
export interface SimpleWiresState {
    /**
     * @generated from protobuf field: repeated modules.Wire wires = 1;
     */
    wires: Wire[];
}
/**
 * @generated from protobuf message modules.Wire
 */
export interface Wire {
    /**
     * @generated from protobuf field: string wire_color = 1;
     */
    wireColor: string;
    /**
     * @generated from protobuf field: bool is_cut = 2;
     */
    isCut: boolean;
}
// @generated message type with reflection information, may provide speed optimized methods
class SimpleWiresInput$Type extends MessageType<SimpleWiresInput> {
    constructor() {
        super("modules.SimpleWiresInput", [
            { no: 1, name: "wire_index", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SimpleWiresInput>): SimpleWiresInput {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.wireIndex = 0;
        if (value !== undefined)
            reflectionMergePartial<SimpleWiresInput>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SimpleWiresInput): SimpleWiresInput {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 wire_index */ 1:
                    message.wireIndex = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SimpleWiresInput, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 wire_index = 1; */
        if (message.wireIndex !== 0)
            writer.tag(1, WireType.Varint).int32(message.wireIndex);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message modules.SimpleWiresInput
 */
export const SimpleWiresInput = new SimpleWiresInput$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SimpleWiresState$Type extends MessageType<SimpleWiresState> {
    constructor() {
        super("modules.SimpleWiresState", [
            { no: 1, name: "wires", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Wire }
        ]);
    }
    create(value?: PartialMessage<SimpleWiresState>): SimpleWiresState {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.wires = [];
        if (value !== undefined)
            reflectionMergePartial<SimpleWiresState>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SimpleWiresState): SimpleWiresState {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated modules.Wire wires */ 1:
                    message.wires.push(Wire.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SimpleWiresState, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated modules.Wire wires = 1; */
        for (let i = 0; i < message.wires.length; i++)
            Wire.internalBinaryWrite(message.wires[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message modules.SimpleWiresState
 */
export const SimpleWiresState = new SimpleWiresState$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Wire$Type extends MessageType<Wire> {
    constructor() {
        super("modules.Wire", [
            { no: 1, name: "wire_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "is_cut", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<Wire>): Wire {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.wireColor = "";
        message.isCut = false;
        if (value !== undefined)
            reflectionMergePartial<Wire>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Wire): Wire {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string wire_color */ 1:
                    message.wireColor = reader.string();
                    break;
                case /* bool is_cut */ 2:
                    message.isCut = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Wire, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string wire_color = 1; */
        if (message.wireColor !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.wireColor);
        /* bool is_cut = 2; */
        if (message.isCut !== false)
            writer.tag(2, WireType.Varint).bool(message.isCut);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message modules.Wire
 */
export const Wire = new Wire$Type();

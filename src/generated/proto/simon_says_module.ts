// @generated by protobuf-ts 2.10.0
// @generated from protobuf file "proto/simon_says_module.proto" (package "modules", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Color } from "./common";
/**
 * @generated from protobuf message modules.SimonSaysInput
 */
export interface SimonSaysInput {
    /**
     * @generated from protobuf field: common.Color color = 1;
     */
    color: Color;
}
// @generated message type with reflection information, may provide speed optimized methods
class SimonSaysInput$Type extends MessageType<SimonSaysInput> {
    constructor() {
        super("modules.SimonSaysInput", [
            { no: 1, name: "color", kind: "enum", T: () => ["common.Color", Color] }
        ]);
    }
    create(value?: PartialMessage<SimonSaysInput>): SimonSaysInput {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.color = 0;
        if (value !== undefined)
            reflectionMergePartial<SimonSaysInput>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SimonSaysInput): SimonSaysInput {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* common.Color color */ 1:
                    message.color = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SimonSaysInput, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* common.Color color = 1; */
        if (message.color !== 0)
            writer.tag(1, WireType.Varint).int32(message.color);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message modules.SimonSaysInput
 */
export const SimonSaysInput = new SimonSaysInput$Type();

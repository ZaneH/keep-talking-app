// @generated by protobuf-ts 2.10.0
// @generated from protobuf file "proto/big_button_module.proto" (package "modules", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Color } from "./common";
import { PressType } from "./common";
/**
 * @generated from protobuf message modules.BigButtonInput
 */
export interface BigButtonInput {
    /**
     * @generated from protobuf field: common.PressType press_type = 1;
     */
    pressType: PressType;
}
/**
 * @generated from protobuf message modules.BigButtonState
 */
export interface BigButtonState {
    /**
     * @generated from protobuf field: common.Color button_color = 1;
     */
    buttonColor: Color;
    /**
     * @generated from protobuf field: string label = 2;
     */
    label: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class BigButtonInput$Type extends MessageType<BigButtonInput> {
    constructor() {
        super("modules.BigButtonInput", [
            { no: 1, name: "press_type", kind: "enum", T: () => ["common.PressType", PressType] }
        ]);
    }
    create(value?: PartialMessage<BigButtonInput>): BigButtonInput {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.pressType = 0;
        if (value !== undefined)
            reflectionMergePartial<BigButtonInput>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BigButtonInput): BigButtonInput {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* common.PressType press_type */ 1:
                    message.pressType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BigButtonInput, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* common.PressType press_type = 1; */
        if (message.pressType !== 0)
            writer.tag(1, WireType.Varint).int32(message.pressType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message modules.BigButtonInput
 */
export const BigButtonInput = new BigButtonInput$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BigButtonState$Type extends MessageType<BigButtonState> {
    constructor() {
        super("modules.BigButtonState", [
            { no: 1, name: "button_color", kind: "enum", T: () => ["common.Color", Color] },
            { no: 2, name: "label", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BigButtonState>): BigButtonState {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.buttonColor = 0;
        message.label = "";
        if (value !== undefined)
            reflectionMergePartial<BigButtonState>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BigButtonState): BigButtonState {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* common.Color button_color */ 1:
                    message.buttonColor = reader.int32();
                    break;
                case /* string label */ 2:
                    message.label = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BigButtonState, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* common.Color button_color = 1; */
        if (message.buttonColor !== 0)
            writer.tag(1, WireType.Varint).int32(message.buttonColor);
        /* string label = 2; */
        if (message.label !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.label);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message modules.BigButtonState
 */
export const BigButtonState = new BigButtonState$Type();

// @generated by protobuf-ts 2.10.0
// @generated from protobuf file "proto/player.proto" (package "player", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { SimonSaysInput } from "./simon_says_module";
import { BigButtonInput } from "./big_button_module";
import { PasswordInput } from "./password_module";
import { SimpleWiresInput } from "./simple_wires_module";
/**
 * @generated from protobuf message player.CreateGameRequest
 */
export interface CreateGameRequest {
}
/**
 * @generated from protobuf message player.CreateGameResponse
 */
export interface CreateGameResponse {
    /**
     * @generated from protobuf field: string session_id = 1;
     */
    sessionId: string;
}
/**
 * @generated from protobuf message player.PlayerInput
 */
export interface PlayerInput {
    /**
     * @generated from protobuf field: string session_id = 1;
     */
    sessionId: string;
    /**
     * @generated from protobuf field: string bomb_id = 2;
     */
    bombId: string;
    /**
     * @generated from protobuf field: string module_id = 3;
     */
    moduleId: string;
    /**
     * @generated from protobuf oneof: input
     */
    input: {
        oneofKind: "simpleWiresInput";
        /**
         * @generated from protobuf field: modules.SimpleWiresInput simple_wires_input = 10;
         */
        simpleWiresInput: SimpleWiresInput;
    } | {
        oneofKind: "passwordInput";
        /**
         * @generated from protobuf field: modules.PasswordInput password_input = 11;
         */
        passwordInput: PasswordInput;
    } | {
        oneofKind: "bigButtonInput";
        /**
         * @generated from protobuf field: modules.BigButtonInput big_button_input = 12;
         */
        bigButtonInput: BigButtonInput;
    } | {
        oneofKind: "simonSaysInput";
        /**
         * @generated from protobuf field: modules.SimonSaysInput simon_says_input = 13;
         */
        simonSaysInput: SimonSaysInput;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message player.PlayerInputResult
 */
export interface PlayerInputResult {
    /**
     * @generated from protobuf field: string module_id = 1;
     */
    moduleId: string;
    /**
     * @generated from protobuf field: bool success = 2;
     */
    success: boolean;
}
// @generated message type with reflection information, may provide speed optimized methods
class CreateGameRequest$Type extends MessageType<CreateGameRequest> {
    constructor() {
        super("player.CreateGameRequest", []);
    }
    create(value?: PartialMessage<CreateGameRequest>): CreateGameRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateGameRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateGameRequest): CreateGameRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateGameRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message player.CreateGameRequest
 */
export const CreateGameRequest = new CreateGameRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateGameResponse$Type extends MessageType<CreateGameResponse> {
    constructor() {
        super("player.CreateGameResponse", [
            { no: 1, name: "session_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateGameResponse>): CreateGameResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.sessionId = "";
        if (value !== undefined)
            reflectionMergePartial<CreateGameResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateGameResponse): CreateGameResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string session_id */ 1:
                    message.sessionId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateGameResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string session_id = 1; */
        if (message.sessionId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sessionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message player.CreateGameResponse
 */
export const CreateGameResponse = new CreateGameResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerInput$Type extends MessageType<PlayerInput> {
    constructor() {
        super("player.PlayerInput", [
            { no: 1, name: "session_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "bomb_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "module_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "simple_wires_input", kind: "message", oneof: "input", T: () => SimpleWiresInput },
            { no: 11, name: "password_input", kind: "message", oneof: "input", T: () => PasswordInput },
            { no: 12, name: "big_button_input", kind: "message", oneof: "input", T: () => BigButtonInput },
            { no: 13, name: "simon_says_input", kind: "message", oneof: "input", T: () => SimonSaysInput }
        ]);
    }
    create(value?: PartialMessage<PlayerInput>): PlayerInput {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.sessionId = "";
        message.bombId = "";
        message.moduleId = "";
        message.input = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<PlayerInput>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerInput): PlayerInput {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string session_id */ 1:
                    message.sessionId = reader.string();
                    break;
                case /* string bomb_id */ 2:
                    message.bombId = reader.string();
                    break;
                case /* string module_id */ 3:
                    message.moduleId = reader.string();
                    break;
                case /* modules.SimpleWiresInput simple_wires_input */ 10:
                    message.input = {
                        oneofKind: "simpleWiresInput",
                        simpleWiresInput: SimpleWiresInput.internalBinaryRead(reader, reader.uint32(), options, (message.input as any).simpleWiresInput)
                    };
                    break;
                case /* modules.PasswordInput password_input */ 11:
                    message.input = {
                        oneofKind: "passwordInput",
                        passwordInput: PasswordInput.internalBinaryRead(reader, reader.uint32(), options, (message.input as any).passwordInput)
                    };
                    break;
                case /* modules.BigButtonInput big_button_input */ 12:
                    message.input = {
                        oneofKind: "bigButtonInput",
                        bigButtonInput: BigButtonInput.internalBinaryRead(reader, reader.uint32(), options, (message.input as any).bigButtonInput)
                    };
                    break;
                case /* modules.SimonSaysInput simon_says_input */ 13:
                    message.input = {
                        oneofKind: "simonSaysInput",
                        simonSaysInput: SimonSaysInput.internalBinaryRead(reader, reader.uint32(), options, (message.input as any).simonSaysInput)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerInput, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string session_id = 1; */
        if (message.sessionId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sessionId);
        /* string bomb_id = 2; */
        if (message.bombId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.bombId);
        /* string module_id = 3; */
        if (message.moduleId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.moduleId);
        /* modules.SimpleWiresInput simple_wires_input = 10; */
        if (message.input.oneofKind === "simpleWiresInput")
            SimpleWiresInput.internalBinaryWrite(message.input.simpleWiresInput, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* modules.PasswordInput password_input = 11; */
        if (message.input.oneofKind === "passwordInput")
            PasswordInput.internalBinaryWrite(message.input.passwordInput, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* modules.BigButtonInput big_button_input = 12; */
        if (message.input.oneofKind === "bigButtonInput")
            BigButtonInput.internalBinaryWrite(message.input.bigButtonInput, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* modules.SimonSaysInput simon_says_input = 13; */
        if (message.input.oneofKind === "simonSaysInput")
            SimonSaysInput.internalBinaryWrite(message.input.simonSaysInput, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message player.PlayerInput
 */
export const PlayerInput = new PlayerInput$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerInputResult$Type extends MessageType<PlayerInputResult> {
    constructor() {
        super("player.PlayerInputResult", [
            { no: 1, name: "module_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerInputResult>): PlayerInputResult {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.moduleId = "";
        message.success = false;
        if (value !== undefined)
            reflectionMergePartial<PlayerInputResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerInputResult): PlayerInputResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string module_id */ 1:
                    message.moduleId = reader.string();
                    break;
                case /* bool success */ 2:
                    message.success = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerInputResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string module_id = 1; */
        if (message.moduleId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.moduleId);
        /* bool success = 2; */
        if (message.success !== false)
            writer.tag(2, WireType.Varint).bool(message.success);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message player.PlayerInputResult
 */
export const PlayerInputResult = new PlayerInputResult$Type();

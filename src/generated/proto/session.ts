// @generated by protobuf-ts 2.10.0
// @generated from protobuf file "proto/session.proto" (package "session", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Bomb } from "./bomb";
/**
 * @generated from protobuf message session.GetBombsRequest
 */
export interface GetBombsRequest {
    /**
     * @generated from protobuf field: string session_id = 1;
     */
    sessionId: string;
}
/**
 * @generated from protobuf message session.GetBombsResponse
 */
export interface GetBombsResponse {
    /**
     * @generated from protobuf field: repeated bomb.Bomb bombs = 1;
     */
    bombs: Bomb[];
}
// @generated message type with reflection information, may provide speed optimized methods
class GetBombsRequest$Type extends MessageType<GetBombsRequest> {
    constructor() {
        super("session.GetBombsRequest", [
            { no: 1, name: "session_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetBombsRequest>): GetBombsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.sessionId = "";
        if (value !== undefined)
            reflectionMergePartial<GetBombsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetBombsRequest): GetBombsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string session_id */ 1:
                    message.sessionId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetBombsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string session_id = 1; */
        if (message.sessionId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sessionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message session.GetBombsRequest
 */
export const GetBombsRequest = new GetBombsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetBombsResponse$Type extends MessageType<GetBombsResponse> {
    constructor() {
        super("session.GetBombsResponse", [
            { no: 1, name: "bombs", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Bomb }
        ]);
    }
    create(value?: PartialMessage<GetBombsResponse>): GetBombsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.bombs = [];
        if (value !== undefined)
            reflectionMergePartial<GetBombsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetBombsResponse): GetBombsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bomb.Bomb bombs */ 1:
                    message.bombs.push(Bomb.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetBombsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated bomb.Bomb bombs = 1; */
        for (let i = 0; i < message.bombs.length; i++)
            Bomb.internalBinaryWrite(message.bombs[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message session.GetBombsResponse
 */
export const GetBombsResponse = new GetBombsResponse$Type();

// @generated by protobuf-ts 2.10.0
// @generated from protobuf file "proto/password_module.proto" (package "modules", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { IncrementDecrement } from "./common";
/**
 * @generated from protobuf message modules.LetterChange
 */
export interface LetterChange {
    /**
     * @generated from protobuf field: int32 letter_index = 1;
     */
    letterIndex: number;
    /**
     * @generated from protobuf field: common.IncrementDecrement direction = 2;
     */
    direction: IncrementDecrement;
}
/**
 * @generated from protobuf message modules.PasswordSubmit
 */
export interface PasswordSubmit {
}
/**
 * @generated from protobuf message modules.PasswordInput
 */
export interface PasswordInput {
    /**
     * @generated from protobuf oneof: input
     */
    input: {
        oneofKind: "letterChange";
        /**
         * @generated from protobuf field: modules.LetterChange letter_change = 1;
         */
        letterChange: LetterChange;
    } | {
        oneofKind: "submit";
        /**
         * @generated from protobuf field: modules.PasswordSubmit submit = 2;
         */
        submit: PasswordSubmit;
    } | {
        oneofKind: undefined;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class LetterChange$Type extends MessageType<LetterChange> {
    constructor() {
        super("modules.LetterChange", [
            { no: 1, name: "letter_index", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "direction", kind: "enum", T: () => ["common.IncrementDecrement", IncrementDecrement] }
        ]);
    }
    create(value?: PartialMessage<LetterChange>): LetterChange {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.letterIndex = 0;
        message.direction = 0;
        if (value !== undefined)
            reflectionMergePartial<LetterChange>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LetterChange): LetterChange {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 letter_index */ 1:
                    message.letterIndex = reader.int32();
                    break;
                case /* common.IncrementDecrement direction */ 2:
                    message.direction = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LetterChange, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 letter_index = 1; */
        if (message.letterIndex !== 0)
            writer.tag(1, WireType.Varint).int32(message.letterIndex);
        /* common.IncrementDecrement direction = 2; */
        if (message.direction !== 0)
            writer.tag(2, WireType.Varint).int32(message.direction);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message modules.LetterChange
 */
export const LetterChange = new LetterChange$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PasswordSubmit$Type extends MessageType<PasswordSubmit> {
    constructor() {
        super("modules.PasswordSubmit", []);
    }
    create(value?: PartialMessage<PasswordSubmit>): PasswordSubmit {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PasswordSubmit>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PasswordSubmit): PasswordSubmit {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PasswordSubmit, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message modules.PasswordSubmit
 */
export const PasswordSubmit = new PasswordSubmit$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PasswordInput$Type extends MessageType<PasswordInput> {
    constructor() {
        super("modules.PasswordInput", [
            { no: 1, name: "letter_change", kind: "message", oneof: "input", T: () => LetterChange },
            { no: 2, name: "submit", kind: "message", oneof: "input", T: () => PasswordSubmit }
        ]);
    }
    create(value?: PartialMessage<PasswordInput>): PasswordInput {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.input = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<PasswordInput>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PasswordInput): PasswordInput {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* modules.LetterChange letter_change */ 1:
                    message.input = {
                        oneofKind: "letterChange",
                        letterChange: LetterChange.internalBinaryRead(reader, reader.uint32(), options, (message.input as any).letterChange)
                    };
                    break;
                case /* modules.PasswordSubmit submit */ 2:
                    message.input = {
                        oneofKind: "submit",
                        submit: PasswordSubmit.internalBinaryRead(reader, reader.uint32(), options, (message.input as any).submit)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PasswordInput, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* modules.LetterChange letter_change = 1; */
        if (message.input.oneofKind === "letterChange")
            LetterChange.internalBinaryWrite(message.input.letterChange, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* modules.PasswordSubmit submit = 2; */
        if (message.input.oneofKind === "submit")
            PasswordSubmit.internalBinaryWrite(message.input.submit, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message modules.PasswordInput
 */
export const PasswordInput = new PasswordInput$Type();

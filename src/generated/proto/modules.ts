// @generated by protobuf-ts 2.10.0
// @generated from protobuf file "proto/modules.proto" (package "modules", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { BigButtonState } from "./big_button_module";
import { SimpleWiresState } from "./simple_wires_module";
/**
 * @generated from protobuf message modules.ModulePosition
 */
export interface ModulePosition {
    /**
     * @generated from protobuf field: int32 face = 1;
     */
    face: number;
    /**
     * @generated from protobuf field: int32 row = 2;
     */
    row: number;
    /**
     * @generated from protobuf field: int32 col = 3;
     */
    col: number;
}
/**
 * @generated from protobuf message modules.Module
 */
export interface Module {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: modules.Module.ModuleType type = 2;
     */
    type: Module_ModuleType;
    /**
     * ModulePosition position = 3;
     *
     * @generated from protobuf field: bool solved = 4;
     */
    solved: boolean;
    /**
     * @generated from protobuf oneof: state
     */
    state: {
        oneofKind: "simpleWires";
        /**
         * @generated from protobuf field: modules.SimpleWiresState simple_wires = 5;
         */
        simpleWires: SimpleWiresState;
    } | {
        oneofKind: "bigButton";
        /**
         * PasswordState password = 6;
         *
         * @generated from protobuf field: modules.BigButtonState big_button = 7;
         */
        bigButton: BigButtonState; // SimonSaysState simon_says = 8;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf enum modules.Module.ModuleType
 */
export enum Module_ModuleType {
    /**
     * @generated from protobuf enum value: UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * @generated from protobuf enum value: SIMPLE_WIRES = 1;
     */
    SIMPLE_WIRES = 1,
    /**
     * @generated from protobuf enum value: PASSWORD = 2;
     */
    PASSWORD = 2,
    /**
     * @generated from protobuf enum value: BIG_BUTTON = 3;
     */
    BIG_BUTTON = 3,
    /**
     * @generated from protobuf enum value: SIMON_SAYS = 4;
     */
    SIMON_SAYS = 4
}
// @generated message type with reflection information, may provide speed optimized methods
class ModulePosition$Type extends MessageType<ModulePosition> {
    constructor() {
        super("modules.ModulePosition", [
            { no: 1, name: "face", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "row", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "col", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ModulePosition>): ModulePosition {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.face = 0;
        message.row = 0;
        message.col = 0;
        if (value !== undefined)
            reflectionMergePartial<ModulePosition>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ModulePosition): ModulePosition {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 face */ 1:
                    message.face = reader.int32();
                    break;
                case /* int32 row */ 2:
                    message.row = reader.int32();
                    break;
                case /* int32 col */ 3:
                    message.col = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ModulePosition, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 face = 1; */
        if (message.face !== 0)
            writer.tag(1, WireType.Varint).int32(message.face);
        /* int32 row = 2; */
        if (message.row !== 0)
            writer.tag(2, WireType.Varint).int32(message.row);
        /* int32 col = 3; */
        if (message.col !== 0)
            writer.tag(3, WireType.Varint).int32(message.col);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message modules.ModulePosition
 */
export const ModulePosition = new ModulePosition$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Module$Type extends MessageType<Module> {
    constructor() {
        super("modules.Module", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "type", kind: "enum", T: () => ["modules.Module.ModuleType", Module_ModuleType] },
            { no: 4, name: "solved", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "simple_wires", kind: "message", oneof: "state", T: () => SimpleWiresState },
            { no: 7, name: "big_button", kind: "message", oneof: "state", T: () => BigButtonState }
        ]);
    }
    create(value?: PartialMessage<Module>): Module {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.type = 0;
        message.solved = false;
        message.state = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<Module>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Module): Module {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* modules.Module.ModuleType type */ 2:
                    message.type = reader.int32();
                    break;
                case /* bool solved */ 4:
                    message.solved = reader.bool();
                    break;
                case /* modules.SimpleWiresState simple_wires */ 5:
                    message.state = {
                        oneofKind: "simpleWires",
                        simpleWires: SimpleWiresState.internalBinaryRead(reader, reader.uint32(), options, (message.state as any).simpleWires)
                    };
                    break;
                case /* modules.BigButtonState big_button */ 7:
                    message.state = {
                        oneofKind: "bigButton",
                        bigButton: BigButtonState.internalBinaryRead(reader, reader.uint32(), options, (message.state as any).bigButton)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Module, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* modules.Module.ModuleType type = 2; */
        if (message.type !== 0)
            writer.tag(2, WireType.Varint).int32(message.type);
        /* bool solved = 4; */
        if (message.solved !== false)
            writer.tag(4, WireType.Varint).bool(message.solved);
        /* modules.SimpleWiresState simple_wires = 5; */
        if (message.state.oneofKind === "simpleWires")
            SimpleWiresState.internalBinaryWrite(message.state.simpleWires, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* modules.BigButtonState big_button = 7; */
        if (message.state.oneofKind === "bigButton")
            BigButtonState.internalBinaryWrite(message.state.bigButton, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message modules.Module
 */
export const Module = new Module$Type();

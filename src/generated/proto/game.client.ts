// @generated by protobuf-ts 2.10.0
// @generated from protobuf file "proto/game.proto" (package "game", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { GameService } from "./game";
import type { PlayerInputResult } from "./player";
import type { PlayerInput } from "./player";
import type { GetBombsResponse } from "./session";
import type { GetBombsRequest } from "./session";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { CreateGameResponse } from "./player";
import type { CreateGameRequest } from "./player";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service game.GameService
 */
export interface IGameServiceClient {
    /**
     * @generated from protobuf rpc: CreateGame(player.CreateGameRequest) returns (player.CreateGameResponse);
     */
    createGame(input: CreateGameRequest, options?: RpcOptions): UnaryCall<CreateGameRequest, CreateGameResponse>;
    /**
     * @generated from protobuf rpc: GetBombs(session.GetBombsRequest) returns (session.GetBombsResponse);
     */
    getBombs(input: GetBombsRequest, options?: RpcOptions): UnaryCall<GetBombsRequest, GetBombsResponse>;
    /**
     * @generated from protobuf rpc: SendInput(player.PlayerInput) returns (player.PlayerInputResult);
     */
    sendInput(input: PlayerInput, options?: RpcOptions): UnaryCall<PlayerInput, PlayerInputResult>;
}
/**
 * @generated from protobuf service game.GameService
 */
export class GameServiceClient implements IGameServiceClient, ServiceInfo {
    typeName = GameService.typeName;
    methods = GameService.methods;
    options = GameService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: CreateGame(player.CreateGameRequest) returns (player.CreateGameResponse);
     */
    createGame(input: CreateGameRequest, options?: RpcOptions): UnaryCall<CreateGameRequest, CreateGameResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateGameRequest, CreateGameResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetBombs(session.GetBombsRequest) returns (session.GetBombsResponse);
     */
    getBombs(input: GetBombsRequest, options?: RpcOptions): UnaryCall<GetBombsRequest, GetBombsResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetBombsRequest, GetBombsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SendInput(player.PlayerInput) returns (player.PlayerInputResult);
     */
    sendInput(input: PlayerInput, options?: RpcOptions): UnaryCall<PlayerInput, PlayerInputResult> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<PlayerInput, PlayerInputResult>("unary", this._transport, method, opt, input);
    }
}
